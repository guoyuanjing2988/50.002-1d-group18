/*
   This file was generated automatically by the Mojo IDE version B1.3.4.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [8-1:0] M_adder_out;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [8-1:0] M_adder_a;
  reg [8-1:0] M_adder_b;
  eightbitadder_1 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .out(M_adder_out),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [8-1:0] M_subtracter_out;
  reg [8-1:0] M_subtracter_a;
  reg [8-1:0] M_subtracter_b;
  eightbitsubtracter_2 subtracter (
    .a(M_subtracter_a),
    .b(M_subtracter_b),
    .out(M_subtracter_out)
  );
  
  wire [8-1:0] M_andd_out;
  reg [8-1:0] M_andd_a;
  reg [8-1:0] M_andd_b;
  eightbitand_3 andd (
    .a(M_andd_a),
    .b(M_andd_b),
    .out(M_andd_out)
  );
  
  wire [8-1:0] M_orr_out;
  reg [8-1:0] M_orr_a;
  reg [8-1:0] M_orr_b;
  eightbitor_4 orr (
    .a(M_orr_a),
    .b(M_orr_b),
    .out(M_orr_out)
  );
  
  wire [8-1:0] M_xorr_out;
  reg [8-1:0] M_xorr_a;
  reg [8-1:0] M_xorr_b;
  eightbitxor_5 xorr (
    .a(M_xorr_a),
    .b(M_xorr_b),
    .out(M_xorr_out)
  );
  
  wire [8-1:0] M_equalsa_out;
  reg [8-1:0] M_equalsa_a;
  reg [8-1:0] M_equalsa_b;
  eightbitequalsa_6 equalsa (
    .a(M_equalsa_a),
    .b(M_equalsa_b),
    .out(M_equalsa_out)
  );
  
  wire [8-1:0] M_shiftleft_out;
  reg [8-1:0] M_shiftleft_a;
  reg [8-1:0] M_shiftleft_b;
  eightbitshiftleft_7 shiftleft (
    .a(M_shiftleft_a),
    .b(M_shiftleft_b),
    .out(M_shiftleft_out)
  );
  
  wire [8-1:0] M_shiftright_out;
  reg [8-1:0] M_shiftright_a;
  reg [8-1:0] M_shiftright_b;
  eightbitshiftright_8 shiftright (
    .a(M_shiftright_a),
    .b(M_shiftright_b),
    .out(M_shiftright_out)
  );
  
  wire [8-1:0] M_sra_out;
  reg [8-1:0] M_sra_a;
  reg [8-1:0] M_sra_b;
  eightbitSRA_9 sra (
    .a(M_sra_a),
    .b(M_sra_b),
    .out(M_sra_out)
  );
  
  wire [8-1:0] M_cmpeq_out;
  reg [1-1:0] M_cmpeq_z;
  eightbitCMPEQ_10 cmpeq (
    .z(M_cmpeq_z),
    .out(M_cmpeq_out)
  );
  
  wire [8-1:0] M_cmplt_out;
  reg [1-1:0] M_cmplt_n;
  reg [1-1:0] M_cmplt_v;
  eightbitCMPLT_11 cmplt (
    .n(M_cmplt_n),
    .v(M_cmplt_v),
    .out(M_cmplt_out)
  );
  
  wire [8-1:0] M_cmple_out;
  reg [1-1:0] M_cmple_z;
  reg [1-1:0] M_cmple_n;
  reg [1-1:0] M_cmple_v;
  eightbitCMPLE_12 cmple (
    .z(M_cmple_z),
    .n(M_cmple_n),
    .v(M_cmple_v),
    .out(M_cmple_out)
  );
  
  integer z;
  
  integer v;
  
  integer n;
  
  integer x;
  integer y;
  
  integer i;
  
  reg [7:0] a;
  
  reg [3:0] b;
  
  always @* begin
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_adder_a = io_dip[0+7-:8];
    M_adder_b = io_dip[8+7-:8];
    z = M_adder_z;
    v = M_adder_v;
    n = M_adder_n;
    M_subtracter_a = io_dip[0+7-:8];
    M_subtracter_b = io_dip[8+7-:8];
    M_andd_a = io_dip[0+7-:8];
    M_andd_b = io_dip[8+7-:8];
    M_orr_a = io_dip[0+7-:8];
    M_orr_b = io_dip[8+7-:8];
    M_xorr_a = io_dip[0+7-:8];
    M_xorr_b = io_dip[8+7-:8];
    M_equalsa_a = io_dip[0+7-:8];
    M_equalsa_b = io_dip[8+7-:8];
    M_shiftleft_a = io_dip[0+7-:8];
    M_shiftleft_b = io_dip[8+7-:8];
    M_shiftright_a = io_dip[0+7-:8];
    M_shiftright_b = io_dip[8+7-:8];
    M_sra_a = io_dip[0+7-:8];
    M_sra_b = io_dip[8+7-:8];
    M_cmpeq_z = z;
    M_cmplt_v = v;
    M_cmplt_n = n;
    M_cmple_z = z;
    M_cmple_v = v;
    M_cmple_n = n;
    x = 1'h0;
    y = 1'h1;
    for (i = 1'h0; i < 3'h6; i = i + 1) begin
      x = x + (y * io_dip[16+(i)*1+0-:1]);
      y = y * 2'h2;
    end
    a = 1'h0;
    
    case (x)
      1'h0: begin
        a = M_adder_out;
      end
      1'h1: begin
        a = M_subtracter_out;
      end
      5'h18: begin
        a = M_andd_out;
      end
      5'h1e: begin
        a = M_orr_out;
      end
      5'h16: begin
        a = M_xorr_out;
      end
      5'h1a: begin
        a = M_equalsa_out;
      end
      6'h20: begin
        a = M_shiftleft_out;
      end
      6'h21: begin
        a = M_shiftright_out;
      end
      6'h23: begin
        a = M_sra_out;
      end
      6'h33: begin
        a = M_cmpeq_out;
      end
      6'h35: begin
        a = M_cmplt_out;
      end
      6'h37: begin
        a = M_cmple_out;
      end
    endcase
    io_led[16+7-:8] = a;
    x = 1'h0;
    y = 1'h1;
    for (i = 1'h0; i < 4'h8; i = i + 1) begin
      x = x + y * a[(i)*1+0-:1];
      y = y * 2'h2;
    end
    io_led[0+7-:8] = io_dip[0+7-:8];
    io_led[8+7-:8] = io_dip[8+7-:8];
  end
endmodule
