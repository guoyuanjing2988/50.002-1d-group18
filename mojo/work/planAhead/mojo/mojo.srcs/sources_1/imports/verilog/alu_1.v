/*
   This file was generated automatically by the Mojo IDE version B1.3.4.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_1 (
    input [7:0] a,
    input [7:0] b,
    input [5:0] alufn,
    output reg [23:0] io_led,
    output reg [7:0] led
  );
  
  
  
  wire [8-1:0] M_adder_out;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [8-1:0] M_adder_a;
  reg [8-1:0] M_adder_b;
  eightbitadder_4 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .out(M_adder_out),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [8-1:0] M_subtracter_out;
  reg [8-1:0] M_subtracter_a;
  reg [8-1:0] M_subtracter_b;
  eightbitsubtracter_5 subtracter (
    .a(M_subtracter_a),
    .b(M_subtracter_b),
    .out(M_subtracter_out)
  );
  
  wire [8-1:0] M_andd_out;
  reg [8-1:0] M_andd_a;
  reg [8-1:0] M_andd_b;
  eightbitand_6 andd (
    .a(M_andd_a),
    .b(M_andd_b),
    .out(M_andd_out)
  );
  
  wire [8-1:0] M_orr_out;
  reg [8-1:0] M_orr_a;
  reg [8-1:0] M_orr_b;
  eightbitor_7 orr (
    .a(M_orr_a),
    .b(M_orr_b),
    .out(M_orr_out)
  );
  
  wire [8-1:0] M_xorr_out;
  reg [8-1:0] M_xorr_a;
  reg [8-1:0] M_xorr_b;
  eightbitxor_8 xorr (
    .a(M_xorr_a),
    .b(M_xorr_b),
    .out(M_xorr_out)
  );
  
  wire [8-1:0] M_equalsa_out;
  reg [8-1:0] M_equalsa_a;
  reg [8-1:0] M_equalsa_b;
  eightbitequalsa_9 equalsa (
    .a(M_equalsa_a),
    .b(M_equalsa_b),
    .out(M_equalsa_out)
  );
  
  wire [8-1:0] M_shiftleft_out;
  reg [8-1:0] M_shiftleft_a;
  reg [8-1:0] M_shiftleft_b;
  eightbitshiftleft_10 shiftleft (
    .a(M_shiftleft_a),
    .b(M_shiftleft_b),
    .out(M_shiftleft_out)
  );
  
  wire [8-1:0] M_shiftright_out;
  reg [8-1:0] M_shiftright_a;
  reg [8-1:0] M_shiftright_b;
  eightbitshiftright_11 shiftright (
    .a(M_shiftright_a),
    .b(M_shiftright_b),
    .out(M_shiftright_out)
  );
  
  wire [8-1:0] M_sra_out;
  reg [8-1:0] M_sra_a;
  reg [8-1:0] M_sra_b;
  eightbitSRA_12 sra (
    .a(M_sra_a),
    .b(M_sra_b),
    .out(M_sra_out)
  );
  
  wire [8-1:0] M_cmpeq_out;
  reg [1-1:0] M_cmpeq_z;
  eightbitCMPEQ_13 cmpeq (
    .z(M_cmpeq_z),
    .out(M_cmpeq_out)
  );
  
  wire [8-1:0] M_cmplt_out;
  reg [1-1:0] M_cmplt_n;
  reg [1-1:0] M_cmplt_v;
  eightbitCMPLT_14 cmplt (
    .n(M_cmplt_n),
    .v(M_cmplt_v),
    .out(M_cmplt_out)
  );
  
  wire [8-1:0] M_cmple_out;
  reg [1-1:0] M_cmple_z;
  reg [1-1:0] M_cmple_n;
  reg [1-1:0] M_cmple_v;
  eightbitCMPLE_15 cmple (
    .z(M_cmple_z),
    .n(M_cmple_n),
    .v(M_cmple_v),
    .out(M_cmple_out)
  );
  
  wire [8-1:0] M_divider_out;
  reg [8-1:0] M_divider_a;
  reg [8-1:0] M_divider_b;
  eightbitdivider_16 divider (
    .a(M_divider_a),
    .b(M_divider_b),
    .out(M_divider_out)
  );
  
  wire [8-1:0] M_multiplier_out;
  reg [8-1:0] M_multiplier_a;
  reg [8-1:0] M_multiplier_b;
  eightbitmultiplier_17 multiplier (
    .a(M_multiplier_a),
    .b(M_multiplier_b),
    .out(M_multiplier_out)
  );
  
  wire [8-1:0] M_modd_out;
  reg [8-1:0] M_modd_a;
  reg [8-1:0] M_modd_b;
  eightbitmod_18 modd (
    .a(M_modd_a),
    .b(M_modd_b),
    .out(M_modd_out)
  );
  
  wire [8-1:0] M_xnorr_out;
  reg [8-1:0] M_xnorr_a;
  reg [8-1:0] M_xnorr_b;
  eightbitxnor_19 xnorr (
    .a(M_xnorr_a),
    .b(M_xnorr_b),
    .out(M_xnorr_out)
  );
  
  wire [8-1:0] M_norr_out;
  reg [8-1:0] M_norr_a;
  reg [8-1:0] M_norr_b;
  eightbitnor_20 norr (
    .a(M_norr_a),
    .b(M_norr_b),
    .out(M_norr_out)
  );
  
  wire [8-1:0] M_nandd_out;
  reg [8-1:0] M_nandd_a;
  reg [8-1:0] M_nandd_b;
  eightbitnand_21 nandd (
    .a(M_nandd_a),
    .b(M_nandd_b),
    .out(M_nandd_out)
  );
  
  wire [8-1:0] M_dotproduct_out;
  reg [8-1:0] M_dotproduct_a;
  reg [8-1:0] M_dotproduct_b;
  eightbitdotproduct_22 dotproduct (
    .a(M_dotproduct_a),
    .b(M_dotproduct_b),
    .out(M_dotproduct_out)
  );
  
  wire [8-1:0] M_nota_out;
  reg [8-1:0] M_nota_a;
  eightbitnota_23 nota (
    .a(M_nota_a),
    .out(M_nota_out)
  );
  
  integer z;
  
  integer v;
  
  integer n;
  
  integer x;
  integer y;
  
  integer i;
  
  reg [7:0] m;
  
  always @* begin
    M_adder_a = a;
    M_adder_b = b;
    z = M_adder_z;
    v = M_adder_v;
    n = M_adder_n;
    M_subtracter_a = a;
    M_subtracter_b = b;
    M_andd_a = a;
    M_andd_b = b;
    M_orr_a = a;
    M_orr_b = b;
    M_xorr_a = a;
    M_xorr_b = b;
    M_equalsa_a = a;
    M_equalsa_b = b;
    M_shiftleft_a = a;
    M_shiftleft_b = b;
    M_shiftright_a = a;
    M_shiftright_b = b;
    M_sra_a = a;
    M_sra_b = b;
    M_cmpeq_z = z;
    M_cmplt_v = v;
    M_cmplt_n = n;
    M_cmple_z = z;
    M_cmple_v = v;
    M_cmple_n = n;
    M_divider_a = a;
    M_divider_b = b;
    M_multiplier_a = a;
    M_multiplier_b = b;
    M_nota_a = a;
    M_norr_a = a;
    M_norr_b = b;
    M_nandd_a = a;
    M_nandd_b = b;
    M_xnorr_a = a;
    M_xnorr_b = b;
    M_dotproduct_a = a;
    M_dotproduct_b = b;
    M_modd_a = a;
    M_modd_b = b;
    x = 1'h0;
    y = 1'h1;
    for (i = 1'h0; i < 3'h6; i = i + 1) begin
      x = x + (y * alufn[(i)*1+0-:1]);
      y = y * 2'h2;
    end
    m = 1'h0;
    
    case (x)
      1'h0: begin
        m = M_adder_out;
      end
      1'h1: begin
        m = M_subtracter_out;
      end
      2'h2: begin
        m = M_multiplier_out;
      end
      3'h4: begin
        m = M_dotproduct_out;
      end
      4'h8: begin
        m = M_divider_out;
      end
      5'h10: begin
        m = M_modd_out;
      end
      5'h18: begin
        m = M_andd_out;
      end
      5'h19: begin
        m = M_nandd_out;
      end
      5'h1e: begin
        m = M_orr_out;
      end
      5'h1f: begin
        m = M_norr_out;
      end
      5'h16: begin
        m = M_xorr_out;
      end
      5'h17: begin
        m = M_xnorr_out;
      end
      5'h1a: begin
        m = M_equalsa_out;
      end
      5'h1b: begin
        m = M_nota_out;
      end
      6'h20: begin
        m = M_shiftleft_out;
      end
      6'h21: begin
        m = M_shiftright_out;
      end
      6'h23: begin
        m = M_sra_out;
      end
      6'h33: begin
        m = M_cmpeq_out;
      end
      6'h35: begin
        m = M_cmplt_out;
      end
      6'h37: begin
        m = M_cmple_out;
      end
    endcase
    io_led[16+7-:8] = m;
    io_led[0+7-:8] = a;
    io_led[8+7-:8] = b;
    led = 1'h0;
    led[0+0-:1] = z;
    led[1+0-:1] = v;
    led[2+0-:1] = n;
  end
endmodule
