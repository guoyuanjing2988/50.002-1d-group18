module mojo_top (
    input clk,
    input rst_n,
    output spi_miso,        // AVR SPI MISO
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    output avr_rx,          // AVR RX (FPGA TX)
    output io_led [3][8],   // LEDs on IO Shield
                             // io_led[0] correspond to input a, io_led[1] correspond to input b, io_led[2] correspond to output c.
    output led[8],          // led is used to represent z,v,n; led[0] is z, led[1] is v, led[2] is n and the rest are 0
    input io_dip [3][8]     // DIP switches on IO Shield
                            // io_dip[0] correspond to input a, io_dip[1] correspond to input b, io_dip[3] correspond to input ALUFN.
  ) {
  

  //define a total of 20 operations.
  sig rst;
  alu myalu(.a(io_dip[0]),.b(io_dip[1]),.alufn(io_dip[2][5:0]));
    .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      test_case my_test;
 
    }
  }
  always {
    reset_cond.in = ~rst_n; 
    rst = reset_cond.out;
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port    
    //using io_dip[2][0:5] as ALUFN[0:5], which are 3rd switch to 8th switch.
    if (io_dip[2][7] == 0){ // left most button to switch mode between self testing and manual testing
    io_led[2] = myalu.io_led[2];  // alu result
    io_led[1] = io_dip[1];  // input b
    io_led[0] = io_dip[0];  // input a
    led=myalu.led;
    } else {
      io_led[2]=my_test.alufn;
      io_led[1]=my_test.b_out;
      io_led[0]=my_test.a_out;
      led=my_test.out;
    }
    
  }    
}